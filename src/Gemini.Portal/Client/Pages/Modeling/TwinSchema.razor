@page "/schema"
@using Gemini.Portal.Client.Components.DigitalTwin.Schema
@using Gemini.Portal.Client.Services

<h2>Schema Models</h2>

<MudPaper Elevation="3" Class="mt-4">
    <MudToolBar>
        <MudPaper Elevation="0" Width="300px" Class="d-flex">
            <MudTextField @bind-Value="searchString" Placeholder="Search" OnKeyUp="@OnKeyPress" Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.Sort" Color="Color.Inherit" Size="Size.Medium" OnClick="@OnOrderClick" />
        </MudPaper>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>
    </MudToolBar>
</MudPaper>

<MudPaper Elevation="0" Class="d-flex mt-4">
    
    <MudPaper Elevation="0" Class="mr-4">        
        <MudList Clickable="true" Dense="true" @bind-SelectedValue="selectedValue">
            @foreach(var model in _interfaces)
            {
                <MudListItem Value="@model">
                    <TwinSchemaPane Model="@model" />
                </MudListItem>
            }            
        </MudList>
    </MudPaper>

    <MudPaper Elevation="3" Width="600px" Class="pa-4">
        <TwinSchemaEditor Model="@((TwinSchemaViewModel)selectedValue)" />
    </MudPaper>

</MudPaper>

@code {
    [Inject]
    public ITwinSchemaService SchemaService { get; set; }

    private IList<TwinSchemaViewModel> _data;
    private IList<TwinSchemaViewModel> _interfaces;


    private object selectedValue;
    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        var data = await SchemaService.GetAllAsync();
        _interfaces = _data = data.Select(it => new TwinSchemaViewModel(it)).ToList();

        await base.OnInitializedAsync();
    }

    private void OnKeyPress(KeyboardEventArgs args)
    {
        _interfaces = _data.Where(FilterFunc).ToArray();
        StateHasChanged();
    }

    private bool FilterFunc(TwinSchemaViewModel model)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (model.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public void OnOrderClick(MouseEventArgs args)
    {
        _interfaces = _data.OrderBy(it => it.Name).ToArray();
    }
}
