@using Gemini.Portal.Client.Components.DigitalTwin.Schema
@implements IDisposable

<MudPaper Elevation="0">

    @if (Model is null)
    {
        <MudText>Not Selected</MudText>
    }
    else {
        <div class="d-flex mb-4">
            <MudTextField T="string" @bind-Value="@Model.Id.Value.Schema" Label="Schema" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
            <MudText Class="ma-1 align-self-center">:</MudText>
            <MudTextField T="string" @bind-Value="@Model.Id.Value.Path" Label="Path" Variant="Variant.Outlined" Margin="Margin.Dense" />
            <MudText Class="ma-1 align-self-center">;</MudText>
            <MudTextField T="string" @bind-Value="@Model.Id.Value.Version" Label="Version" Variant="Variant.Outlined" Margin="Margin.Dense" />
        </div>

        <MudTextField T="string" @bind-Value="@Model.Name.Value" Label="Name" Variant="Variant.Outlined" HelperText="The ''programming'' name of the property." Margin="Margin.Dense" Class="mb-4" />

        <MudTextField T="string" @bind-Value="@Model.DisplayName.Value" Label="Display Name" Variant="Variant.Outlined" HelperText="A localizable name for display" Margin="Margin.Dense" Class="mb-4" />

        <MudTextField T="string" @bind-Value="@Model.Description.Value" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" HelperText="A localizable description for display" Lines="5" Class="mb-4" />

        <MudTextField T="string" @bind-Value="@Model.Comment.Value" Label="Comment" Variant="Variant.Outlined" Margin="Margin.Dense" HelperText="A comment for model authors" Lines="5" Class="mb-4" />

        <MudAutocomplete T="TwinSchemaViewModel" Label="Schema" @bind-Value="@Model.Schema.Value" ToStringFunc="@(it => it.Name)" SearchFunc="@Search" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
    }
</MudPaper>

@code {
    [Parameter]
    public TwinTelemetryViewModel? Model { get; set; }

    [Parameter]
    public IList<TwinSchemaViewModel> Schemas { get; set; } = null!;


    private async Task<IEnumerable<TwinSchemaViewModel>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Schemas.ToArray();

        return Schemas.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override void OnInitialized()
    {
        if (Model is not null)
        {
            Model.Changed += OnChanged;
        }
        base.OnInitialized();
    }

    private void OnChanged(object sender, EditableEventArgs args)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        if (Model is not null)
        {
            Model.Changed -= OnChanged;
        }
    }
}
