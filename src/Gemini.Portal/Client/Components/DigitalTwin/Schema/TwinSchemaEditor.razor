@implements IDisposable

<MudPaper Elevation="0">

    @if (Model is null)
    {
        <MudText>Not Selected</MudText>
    }
    else 
    {
        <MudTextField T="string" Text="@Model.Name" Label="Display Name" Variant="Variant.Outlined" HelperText="A localizable name for display" Margin="Margin.Dense" Disabled="true" Class="mb-4" />

        <MudTextField T="string" @bind-Value="@Model.DisplayName.Value" Disabled="true" Label="Display Name" Variant="Variant.Outlined" HelperText="A localizable name for display" Margin="Margin.Dense" Class="mb-4" />

        <MudTextField T="string" @bind-Value="@Model.Description.Value" Disabled="true" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" HelperText="A localizable description for display" Lines="5" Class="mb-4" />
    }
</MudPaper>

@code {
    [Parameter]
    public TwinSchemaViewModel? Model { get; set; }

        protected override void OnInitialized()
    {
        if (Model is not null)
        {
            Model.Changed += OnChanged;
        }
        base.OnInitialized();
    }

    private void OnChanged(object sender, EditableEventArgs args)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        if (Model is not null)
        {
            Model.Changed -= OnChanged;
        }
    }
}
